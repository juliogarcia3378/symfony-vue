<?php
/**
 * InlineResponse200
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EngagedNation API
 *
 * Engaged API with all the API Calls described
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * InlineResponse200 Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse200 implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'game_name' => 'string',
        'times_played' => 'int',
        'top_score' => 'int',
        'top_player' => 'string',
        'last_updated' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'game_name' => 'string',
        'times_played' => 'int32',
        'top_score' => 'int32',
        'top_player' => 'string',
        'last_updated' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'game_name' => 'game_name',
        'times_played' => 'times_played',
        'top_score' => 'top_score',
        'top_player' => 'top_player',
        'last_updated' => 'last_updated'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'game_name' => 'setGameName',
        'times_played' => 'setTimesPlayed',
        'top_score' => 'setTopScore',
        'top_player' => 'setTopPlayer',
        'last_updated' => 'setLastUpdated'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'game_name' => 'getGameName',
        'times_played' => 'getTimesPlayed',
        'top_score' => 'getTopScore',
        'top_player' => 'getTopPlayer',
        'last_updated' => 'getLastUpdated'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['game_name'] = isset($data['game_name']) ? $data['game_name'] : null;
        $this->container['times_played'] = isset($data['times_played']) ? $data['times_played'] : null;
        $this->container['top_score'] = isset($data['top_score']) ? $data['top_score'] : null;
        $this->container['top_player'] = isset($data['top_player']) ? $data['top_player'] : null;
        $this->container['last_updated'] = isset($data['last_updated']) ? $data['last_updated'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id Event ID.
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets game_name
     * @return string
     */
    public function getGameName()
    {
        return $this->container['game_name'];
    }

    /**
     * Sets game_name
     * @param string $game_name Game Name.
     * @return $this
     */
    public function setGameName($game_name)
    {
        $this->container['game_name'] = $game_name;

        return $this;
    }

    /**
     * Gets times_played
     * @return int
     */
    public function getTimesPlayed()
    {
        return $this->container['times_played'];
    }

    /**
     * Sets times_played
     * @param int $times_played Times Played.
     * @return $this
     */
    public function setTimesPlayed($times_played)
    {
        $this->container['times_played'] = $times_played;

        return $this;
    }

    /**
     * Gets top_score
     * @return int
     */
    public function getTopScore()
    {
        return $this->container['top_score'];
    }

    /**
     * Sets top_score
     * @param int $top_score Top Score.
     * @return $this
     */
    public function setTopScore($top_score)
    {
        $this->container['top_score'] = $top_score;

        return $this;
    }

    /**
     * Gets top_player
     * @return string
     */
    public function getTopPlayer()
    {
        return $this->container['top_player'];
    }

    /**
     * Sets top_player
     * @param string $top_player Top player name.
     * @return $this
     */
    public function setTopPlayer($top_player)
    {
        $this->container['top_player'] = $top_player;

        return $this;
    }

    /**
     * Gets last_updated
     * @return string
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     * @param string $last_updated Last Updated Timestamp. .
     * @return $this
     */
    public function setLastUpdated($last_updated)
    {
        $this->container['last_updated'] = $last_updated;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


